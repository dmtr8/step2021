Компонент

Компонент - это логически завершённый код, предназначенный для извлечения информации из 
инфоблоков и других источников и преобразования её в HTML-код для отображения в виде фрагментов
web-страниц. Состоит из собственно компонента (контроллер) и шаблона (представление). 
Компонент, с помощью API одного или нескольких модулей, манипулирует данными. 
Шаблон компонента выводит данные на страницу.

Компонент подключается методом IncludeComponent Рабочая версия компонентов - 2.0. 
Использование компонентов 1.0 не рекомендуется, но их ещё можно встретить на сайтах, 
построенных на ранних версиях системы.

Компоненты версии 2.0 подключаются в коде страницы с помощью функции IncludeComponent(). 
В качестве параметров функции используется:
-- название компонента в форме <пространство_имен>:<название_компонента>. 
Причем название компонента рекомендуется строить иерархически, начиная с общего понятия и 
заканчивая конкретным назначением компонента. 
Например, catalog, catalog.element, catalog.section.list и т.п.
-- название шаблона. Шаблон компонента "по умолчанию" можно задавать пустой строкой, 
также можно явно определять .default
-- массив параметров компонента Array(...)

Carrier Rider Mapper
Компоненты в полной мере реализуют паттерн проектирования Carrier Rider Mapper.
-- Carrier. 
Носитель любой информации к которой могут иметь доступ несколько клиентов одновременно.
-- Rider 
(Reader либо Writer)- объекты, посредством которых Carrier предоставляет доступ к хранимой 
в нём информации. Клиенты считывают и записывают информацию хранимую в Carrier исключительно 
только посредством объектов типа Reader и Writer. Таким образом, 
Reader и Writer - интерфейсы доступа к информации.
-- Mapper (Scanner либо Formatter) - объекты обёртки над Reader либо Writer соответственно. 
Мапперы отвечают за преобразование форматов данных в удобные для клиентов форматы.

Поток информации от носителя к клиенту (считывание): Carrier > Reader > Scanner > Client.
Поток информации от клиента к носителю (запись): Carrier < Writer < Formatter < Client.

Введение прослойки мапперов между Carrier-Rider и клиентами позволяет соединять один и 
тот же Carrier-Rider с разными типами клиентов посредством соответствующих (разных) мапперов.





