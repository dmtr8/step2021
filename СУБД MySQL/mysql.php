<?php
/*
    База данных - совокупность связанных между собой данных,сохраняемая в двумерных таблицах информационной
системы. Программное обеспечение информационной системы , обеспечивающее создание, ведение и совместное использование
баз данных, называется системой управления базами данных (СУБД).

    Язык программирования, с помощью которого пользователь общается с СУБД ('осуществляет запросы к базе данных'),
называется SQL (Structured Query Language, структурированный язык запросов).

    Теория реляционных баз данных была разработана доктором Коддом из компании IBM в 1970 году. Одной из ее задач
была попытка упростить структуру бд. В ней отсутствовали явные указатели на предков и потомков, а все данные
были представлены в виде простых таблиц, разбитых на строки и столбцы, на пересечении которых расположены данные.
    Особенности реляционной бд :
-данные хранятся в таблицах, состоящих из столбцов и строк.
-на пересечении каждого столбца и строки находится только одно значение.
-у каждого столбца есть свое имя, которое служит его названием , и все значения в одном столбце именют один тип.
-столбцы распологаются в определенном порядке , который задается при создании таблица, в отличии от строк,
которые распологаются в произвольном порядке.
-запросы к бд возврают результат в виде таблиц, которые тоже могут выступать как объект запросов.
    В математике таблица, все строки которой отличаются друг от друга, называются отношением (relation). Именно
этому термину реляционные бд обязаны своим названием.
    Запросы к таблицам бд также возвращают таблица, которые называют результирующими таблицами.





*/
//SELECT * FROM `users` WHERE gender = 2
//SELECT * FROM `users` WHERE position_id = 1 OR position_id = 2
//INSERT INTO `users` (`id`, `name`, `age`, `gender`, `position_id` ) VALUES (NULL, "Дима", "2", "1","4");

//нужно выбрать всех сотрудников зарплата которых больше 50к
//SELECT * FROM `users` WHERE `position_id` IN (SELECT `id` FROM `positions` WHERE `salary` > 50000);

/*
 на примере бд (а)

 ---INNER JOIN
 Запрос вернет объединенные данные, которые пересекаются по условию, указанному в INNER JOIN ON <..>.
В нашем случае условие <таблица_пользователей>.<идентификатор_отдела> должен совпадать с
<таблица_отделов>.<идентификатор>

Выбираются только совпадающие данные из объединяемых таблиц.

SELECT u.id, u.name, p.name AS p_name
FROM users u
INNER JOIN positions p ON u.position_id = p.id


 ---Чтобы получить данные, которые подходят по условию частично, необходимо использовать
внешнее объединение - OUTER JOIN.

Существует два типа внешнего объединения OUTER JOIN - LEFT OUTER JOIN и RIGHT OUTER JOIN.
Работают они одинаково, разница заключается в том что LEFT - указывает что "внешней" таблицей будет находящаяся слева.
Ключевое слово OUTER можно опустить. Запись LEFT JOIN идентична LEFT OUTER JOIN.

SELECT u.id, u.name, p.name AS p_name
FROM users u
LEFT OUTER JOIN positions p ON u.position_id = p.id





*/
